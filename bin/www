#!/usr/bin/env node
const _ = require('lodash')
const debug = require('debug')('demo:server')
const http = require('http')
const WebSocket = require('ws')
const serverUtils = require('server-utils')
// 设置logger
serverUtils.setLogger(require('../app/logger'))

const app = require('../app')
const config = require('../app/config')
const rpcrouter = require('../RPCRoutes')

// 计划任务
const schedule = require('../schedule')
const scheduleJob = serverUtils.scheduleJob
// RPC Websocket 连接池
const websocketUtil = serverUtils.websocketUtil
// rabbitmq
// const rabbitmqClinet = serverUtils.rabbitmqClinet
// mongo
const mongoClient = serverUtils.mongoClient
// elasticsearch
// const elasticsearchClient = serverUtils.elasticsearchClient
// sms
// const smsClient = serverUtils.smsClient
// file
// const fileUtil = serverUtils.fileUtil

let port = 9090

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */

port = normalizePort(process.env.PORT || port)
app.set('port', port)

/**
 * Create HTTP server.
 */

let server = http.createServer(app)
global.wss = new WebSocket.Server({
  server
})

wss.on('connection', (ws, req) => {
  websocketUtil.initWSServer(ws, req, rpcrouter)
  // ws.send('something');
})

const noop = () => {}

const interval = setInterval(() => {
  wss.clients.forEach(ws => {
    if (ws.isAlive === false) return ws.terminate()

    ws.isAlive = false
    ws.ping(noop)
  })
}, 30000)

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  console.log('services running on port ' + port)
  let addr = server.address()
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
  // for schedule job
  console.log('Init schedule')
  scheduleJob.initSchedule(config, schedule)

  // RPC Websocket 连接池
  // console.log('Init connection pools')
  // websocketUtil.genConnectionPools(config.wsservers)

  // RPC rabbitmq 连接池
  // console.log('Init rabbitmq')
  // rabbitmqClinet.initRabbitmqClient(config.rabbitmq, rpcrouter)

  // mongoClient
  mongoClient.initMongo(config.mongo)

  // elasticsearchClient
  // elasticsearchClient.initElasticsearch(config.elasticsearch)

  // 短信平台
  // console.log('Init sms')
  // smsClient.initSms(config.sms)

  // qiniu
  // console.log('Init qiniu')
  // fileUtil.initQiniu(config.qiniu)
})
server.on('error', onError)
server.on('listening', onListening)
